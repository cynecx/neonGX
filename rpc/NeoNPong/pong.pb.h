// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pong.proto

#ifndef PROTOBUF_pong_2eproto__INCLUDED
#define PROTOBUF_pong_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pong {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pong_2eproto();
void protobuf_AssignDesc_pong_2eproto();
void protobuf_ShutdownFile_pong_2eproto();

class GameSettings;
class GameUpdate;
class GameAction;
class GamePayload;

enum GamePayload_Type {
  GamePayload_Type_Settings = 1,
  GamePayload_Type_Update = 2,
  GamePayload_Type_Action = 3
};
bool GamePayload_Type_IsValid(int value);
const GamePayload_Type GamePayload_Type_Type_MIN = GamePayload_Type_Settings;
const GamePayload_Type GamePayload_Type_Type_MAX = GamePayload_Type_Action;
const int GamePayload_Type_Type_ARRAYSIZE = GamePayload_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* GamePayload_Type_descriptor();
inline const ::std::string& GamePayload_Type_Name(GamePayload_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    GamePayload_Type_descriptor(), value);
}
inline bool GamePayload_Type_Parse(
    const ::std::string& name, GamePayload_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GamePayload_Type>(
    GamePayload_Type_descriptor(), name, value);
}
// ===================================================================

class GameSettings : public ::google::protobuf::Message {
 public:
  GameSettings();
  virtual ~GameSettings();

  GameSettings(const GameSettings& from);

  inline GameSettings& operator=(const GameSettings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSettings& default_instance();

  void Swap(GameSettings* other);

  // implements Message ----------------------------------------------

  GameSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameSettings& from);
  void MergeFrom(const GameSettings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 field_width = 1;
  inline bool has_field_width() const;
  inline void clear_field_width();
  static const int kFieldWidthFieldNumber = 1;
  inline ::google::protobuf::int32 field_width() const;
  inline void set_field_width(::google::protobuf::int32 value);

  // required int32 field_height = 2;
  inline bool has_field_height() const;
  inline void clear_field_height();
  static const int kFieldHeightFieldNumber = 2;
  inline ::google::protobuf::int32 field_height() const;
  inline void set_field_height(::google::protobuf::int32 value);

  // required int32 paddle_width = 3;
  inline bool has_paddle_width() const;
  inline void clear_paddle_width();
  static const int kPaddleWidthFieldNumber = 3;
  inline ::google::protobuf::int32 paddle_width() const;
  inline void set_paddle_width(::google::protobuf::int32 value);

  // required int32 paddle_height = 4;
  inline bool has_paddle_height() const;
  inline void clear_paddle_height();
  static const int kPaddleHeightFieldNumber = 4;
  inline ::google::protobuf::int32 paddle_height() const;
  inline void set_paddle_height(::google::protobuf::int32 value);

  // required int32 ball_width = 5;
  inline bool has_ball_width() const;
  inline void clear_ball_width();
  static const int kBallWidthFieldNumber = 5;
  inline ::google::protobuf::int32 ball_width() const;
  inline void set_ball_width(::google::protobuf::int32 value);

  // required int32 ball_height = 6;
  inline bool has_ball_height() const;
  inline void clear_ball_height();
  static const int kBallHeightFieldNumber = 6;
  inline ::google::protobuf::int32 ball_height() const;
  inline void set_ball_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pong.GameSettings)
 private:
  inline void set_has_field_width();
  inline void clear_has_field_width();
  inline void set_has_field_height();
  inline void clear_has_field_height();
  inline void set_has_paddle_width();
  inline void clear_has_paddle_width();
  inline void set_has_paddle_height();
  inline void clear_has_paddle_height();
  inline void set_has_ball_width();
  inline void clear_has_ball_width();
  inline void set_has_ball_height();
  inline void clear_has_ball_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 field_width_;
  ::google::protobuf::int32 field_height_;
  ::google::protobuf::int32 paddle_width_;
  ::google::protobuf::int32 paddle_height_;
  ::google::protobuf::int32 ball_width_;
  ::google::protobuf::int32 ball_height_;
  friend void  protobuf_AddDesc_pong_2eproto();
  friend void protobuf_AssignDesc_pong_2eproto();
  friend void protobuf_ShutdownFile_pong_2eproto();

  void InitAsDefaultInstance();
  static GameSettings* default_instance_;
};
// -------------------------------------------------------------------

class GameUpdate : public ::google::protobuf::Message {
 public:
  GameUpdate();
  virtual ~GameUpdate();

  GameUpdate(const GameUpdate& from);

  inline GameUpdate& operator=(const GameUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameUpdate& default_instance();

  void Swap(GameUpdate* other);

  // implements Message ----------------------------------------------

  GameUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameUpdate& from);
  void MergeFrom(const GameUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required int32 p1_dy = 2;
  inline bool has_p1_dy() const;
  inline void clear_p1_dy();
  static const int kP1DyFieldNumber = 2;
  inline ::google::protobuf::int32 p1_dy() const;
  inline void set_p1_dy(::google::protobuf::int32 value);

  // required int32 p2_dy = 3;
  inline bool has_p2_dy() const;
  inline void clear_p2_dy();
  static const int kP2DyFieldNumber = 3;
  inline ::google::protobuf::int32 p2_dy() const;
  inline void set_p2_dy(::google::protobuf::int32 value);

  // required bool started = 4;
  inline bool has_started() const;
  inline void clear_started();
  static const int kStartedFieldNumber = 4;
  inline bool started() const;
  inline void set_started(bool value);

  // required int32 p1_points = 5;
  inline bool has_p1_points() const;
  inline void clear_p1_points();
  static const int kP1PointsFieldNumber = 5;
  inline ::google::protobuf::int32 p1_points() const;
  inline void set_p1_points(::google::protobuf::int32 value);

  // required int32 p2_points = 6;
  inline bool has_p2_points() const;
  inline void clear_p2_points();
  static const int kP2PointsFieldNumber = 6;
  inline ::google::protobuf::int32 p2_points() const;
  inline void set_p2_points(::google::protobuf::int32 value);

  // required int32 ball_x = 7;
  inline bool has_ball_x() const;
  inline void clear_ball_x();
  static const int kBallXFieldNumber = 7;
  inline ::google::protobuf::int32 ball_x() const;
  inline void set_ball_x(::google::protobuf::int32 value);

  // required int32 ball_y = 8;
  inline bool has_ball_y() const;
  inline void clear_ball_y();
  static const int kBallYFieldNumber = 8;
  inline ::google::protobuf::int32 ball_y() const;
  inline void set_ball_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pong.GameUpdate)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_p1_dy();
  inline void clear_has_p1_dy();
  inline void set_has_p2_dy();
  inline void clear_has_p2_dy();
  inline void set_has_started();
  inline void clear_has_started();
  inline void set_has_p1_points();
  inline void clear_has_p1_points();
  inline void set_has_p2_points();
  inline void clear_has_p2_points();
  inline void set_has_ball_x();
  inline void clear_has_ball_x();
  inline void set_has_ball_y();
  inline void clear_has_ball_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::int32 p1_dy_;
  ::google::protobuf::int32 p2_dy_;
  bool started_;
  ::google::protobuf::int32 p1_points_;
  ::google::protobuf::int32 p2_points_;
  ::google::protobuf::int32 ball_x_;
  ::google::protobuf::int32 ball_y_;
  friend void  protobuf_AddDesc_pong_2eproto();
  friend void protobuf_AssignDesc_pong_2eproto();
  friend void protobuf_ShutdownFile_pong_2eproto();

  void InitAsDefaultInstance();
  static GameUpdate* default_instance_;
};
// -------------------------------------------------------------------

class GameAction : public ::google::protobuf::Message {
 public:
  GameAction();
  virtual ~GameAction();

  GameAction(const GameAction& from);

  inline GameAction& operator=(const GameAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameAction& default_instance();

  void Swap(GameAction* other);

  // implements Message ----------------------------------------------

  GameAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameAction& from);
  void MergeFrom(const GameAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline ::google::protobuf::int32 player() const;
  inline void set_player(::google::protobuf::int32 value);

  // required int32 dy = 2;
  inline bool has_dy() const;
  inline void clear_dy();
  static const int kDyFieldNumber = 2;
  inline ::google::protobuf::int32 dy() const;
  inline void set_dy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pong.GameAction)
 private:
  inline void set_has_player();
  inline void clear_has_player();
  inline void set_has_dy();
  inline void clear_has_dy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 player_;
  ::google::protobuf::int32 dy_;
  friend void  protobuf_AddDesc_pong_2eproto();
  friend void protobuf_AssignDesc_pong_2eproto();
  friend void protobuf_ShutdownFile_pong_2eproto();

  void InitAsDefaultInstance();
  static GameAction* default_instance_;
};
// -------------------------------------------------------------------

class GamePayload : public ::google::protobuf::Message {
 public:
  GamePayload();
  virtual ~GamePayload();

  GamePayload(const GamePayload& from);

  inline GamePayload& operator=(const GamePayload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamePayload& default_instance();

  void Swap(GamePayload* other);

  // implements Message ----------------------------------------------

  GamePayload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamePayload& from);
  void MergeFrom(const GamePayload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GamePayload_Type Type;
  static const Type Settings = GamePayload_Type_Settings;
  static const Type Update = GamePayload_Type_Update;
  static const Type Action = GamePayload_Type_Action;
  static inline bool Type_IsValid(int value) {
    return GamePayload_Type_IsValid(value);
  }
  static const Type Type_MIN =
    GamePayload_Type_Type_MIN;
  static const Type Type_MAX =
    GamePayload_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    GamePayload_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return GamePayload_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return GamePayload_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return GamePayload_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .pong.GamePayload.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::pong::GamePayload_Type type() const;
  inline void set_type(::pong::GamePayload_Type value);

  // optional .pong.GameSettings settings = 2;
  inline bool has_settings() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 2;
  inline const ::pong::GameSettings& settings() const;
  inline ::pong::GameSettings* mutable_settings();
  inline ::pong::GameSettings* release_settings();
  inline void set_allocated_settings(::pong::GameSettings* settings);

  // optional .pong.GameUpdate update = 3;
  inline bool has_update() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 3;
  inline const ::pong::GameUpdate& update() const;
  inline ::pong::GameUpdate* mutable_update();
  inline ::pong::GameUpdate* release_update();
  inline void set_allocated_update(::pong::GameUpdate* update);

  // optional .pong.GameAction action = 4;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 4;
  inline const ::pong::GameAction& action() const;
  inline ::pong::GameAction* mutable_action();
  inline ::pong::GameAction* release_action();
  inline void set_allocated_action(::pong::GameAction* action);

  // @@protoc_insertion_point(class_scope:pong.GamePayload)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_settings();
  inline void clear_has_settings();
  inline void set_has_update();
  inline void clear_has_update();
  inline void set_has_action();
  inline void clear_has_action();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pong::GameSettings* settings_;
  ::pong::GameUpdate* update_;
  ::pong::GameAction* action_;
  int type_;
  friend void  protobuf_AddDesc_pong_2eproto();
  friend void protobuf_AssignDesc_pong_2eproto();
  friend void protobuf_ShutdownFile_pong_2eproto();

  void InitAsDefaultInstance();
  static GamePayload* default_instance_;
};
// ===================================================================


// ===================================================================

// GameSettings

// required int32 field_width = 1;
inline bool GameSettings::has_field_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameSettings::set_has_field_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameSettings::clear_has_field_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameSettings::clear_field_width() {
  field_width_ = 0;
  clear_has_field_width();
}
inline ::google::protobuf::int32 GameSettings::field_width() const {
  // @@protoc_insertion_point(field_get:pong.GameSettings.field_width)
  return field_width_;
}
inline void GameSettings::set_field_width(::google::protobuf::int32 value) {
  set_has_field_width();
  field_width_ = value;
  // @@protoc_insertion_point(field_set:pong.GameSettings.field_width)
}

// required int32 field_height = 2;
inline bool GameSettings::has_field_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameSettings::set_has_field_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameSettings::clear_has_field_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameSettings::clear_field_height() {
  field_height_ = 0;
  clear_has_field_height();
}
inline ::google::protobuf::int32 GameSettings::field_height() const {
  // @@protoc_insertion_point(field_get:pong.GameSettings.field_height)
  return field_height_;
}
inline void GameSettings::set_field_height(::google::protobuf::int32 value) {
  set_has_field_height();
  field_height_ = value;
  // @@protoc_insertion_point(field_set:pong.GameSettings.field_height)
}

// required int32 paddle_width = 3;
inline bool GameSettings::has_paddle_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameSettings::set_has_paddle_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameSettings::clear_has_paddle_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameSettings::clear_paddle_width() {
  paddle_width_ = 0;
  clear_has_paddle_width();
}
inline ::google::protobuf::int32 GameSettings::paddle_width() const {
  // @@protoc_insertion_point(field_get:pong.GameSettings.paddle_width)
  return paddle_width_;
}
inline void GameSettings::set_paddle_width(::google::protobuf::int32 value) {
  set_has_paddle_width();
  paddle_width_ = value;
  // @@protoc_insertion_point(field_set:pong.GameSettings.paddle_width)
}

// required int32 paddle_height = 4;
inline bool GameSettings::has_paddle_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameSettings::set_has_paddle_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameSettings::clear_has_paddle_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameSettings::clear_paddle_height() {
  paddle_height_ = 0;
  clear_has_paddle_height();
}
inline ::google::protobuf::int32 GameSettings::paddle_height() const {
  // @@protoc_insertion_point(field_get:pong.GameSettings.paddle_height)
  return paddle_height_;
}
inline void GameSettings::set_paddle_height(::google::protobuf::int32 value) {
  set_has_paddle_height();
  paddle_height_ = value;
  // @@protoc_insertion_point(field_set:pong.GameSettings.paddle_height)
}

// required int32 ball_width = 5;
inline bool GameSettings::has_ball_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameSettings::set_has_ball_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameSettings::clear_has_ball_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameSettings::clear_ball_width() {
  ball_width_ = 0;
  clear_has_ball_width();
}
inline ::google::protobuf::int32 GameSettings::ball_width() const {
  // @@protoc_insertion_point(field_get:pong.GameSettings.ball_width)
  return ball_width_;
}
inline void GameSettings::set_ball_width(::google::protobuf::int32 value) {
  set_has_ball_width();
  ball_width_ = value;
  // @@protoc_insertion_point(field_set:pong.GameSettings.ball_width)
}

// required int32 ball_height = 6;
inline bool GameSettings::has_ball_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameSettings::set_has_ball_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameSettings::clear_has_ball_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameSettings::clear_ball_height() {
  ball_height_ = 0;
  clear_has_ball_height();
}
inline ::google::protobuf::int32 GameSettings::ball_height() const {
  // @@protoc_insertion_point(field_get:pong.GameSettings.ball_height)
  return ball_height_;
}
inline void GameSettings::set_ball_height(::google::protobuf::int32 value) {
  set_has_ball_height();
  ball_height_ = value;
  // @@protoc_insertion_point(field_set:pong.GameSettings.ball_height)
}

// -------------------------------------------------------------------

// GameUpdate

// required string id = 1;
inline bool GameUpdate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameUpdate::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameUpdate::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameUpdate::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& GameUpdate::id() const {
  // @@protoc_insertion_point(field_get:pong.GameUpdate.id)
  return *id_;
}
inline void GameUpdate::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:pong.GameUpdate.id)
}
inline void GameUpdate::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:pong.GameUpdate.id)
}
inline void GameUpdate::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pong.GameUpdate.id)
}
inline ::std::string* GameUpdate::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pong.GameUpdate.id)
  return id_;
}
inline ::std::string* GameUpdate::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GameUpdate::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pong.GameUpdate.id)
}

// required int32 p1_dy = 2;
inline bool GameUpdate::has_p1_dy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameUpdate::set_has_p1_dy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameUpdate::clear_has_p1_dy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameUpdate::clear_p1_dy() {
  p1_dy_ = 0;
  clear_has_p1_dy();
}
inline ::google::protobuf::int32 GameUpdate::p1_dy() const {
  // @@protoc_insertion_point(field_get:pong.GameUpdate.p1_dy)
  return p1_dy_;
}
inline void GameUpdate::set_p1_dy(::google::protobuf::int32 value) {
  set_has_p1_dy();
  p1_dy_ = value;
  // @@protoc_insertion_point(field_set:pong.GameUpdate.p1_dy)
}

// required int32 p2_dy = 3;
inline bool GameUpdate::has_p2_dy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameUpdate::set_has_p2_dy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameUpdate::clear_has_p2_dy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameUpdate::clear_p2_dy() {
  p2_dy_ = 0;
  clear_has_p2_dy();
}
inline ::google::protobuf::int32 GameUpdate::p2_dy() const {
  // @@protoc_insertion_point(field_get:pong.GameUpdate.p2_dy)
  return p2_dy_;
}
inline void GameUpdate::set_p2_dy(::google::protobuf::int32 value) {
  set_has_p2_dy();
  p2_dy_ = value;
  // @@protoc_insertion_point(field_set:pong.GameUpdate.p2_dy)
}

// required bool started = 4;
inline bool GameUpdate::has_started() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameUpdate::set_has_started() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameUpdate::clear_has_started() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameUpdate::clear_started() {
  started_ = false;
  clear_has_started();
}
inline bool GameUpdate::started() const {
  // @@protoc_insertion_point(field_get:pong.GameUpdate.started)
  return started_;
}
inline void GameUpdate::set_started(bool value) {
  set_has_started();
  started_ = value;
  // @@protoc_insertion_point(field_set:pong.GameUpdate.started)
}

// required int32 p1_points = 5;
inline bool GameUpdate::has_p1_points() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameUpdate::set_has_p1_points() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameUpdate::clear_has_p1_points() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameUpdate::clear_p1_points() {
  p1_points_ = 0;
  clear_has_p1_points();
}
inline ::google::protobuf::int32 GameUpdate::p1_points() const {
  // @@protoc_insertion_point(field_get:pong.GameUpdate.p1_points)
  return p1_points_;
}
inline void GameUpdate::set_p1_points(::google::protobuf::int32 value) {
  set_has_p1_points();
  p1_points_ = value;
  // @@protoc_insertion_point(field_set:pong.GameUpdate.p1_points)
}

// required int32 p2_points = 6;
inline bool GameUpdate::has_p2_points() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameUpdate::set_has_p2_points() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameUpdate::clear_has_p2_points() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameUpdate::clear_p2_points() {
  p2_points_ = 0;
  clear_has_p2_points();
}
inline ::google::protobuf::int32 GameUpdate::p2_points() const {
  // @@protoc_insertion_point(field_get:pong.GameUpdate.p2_points)
  return p2_points_;
}
inline void GameUpdate::set_p2_points(::google::protobuf::int32 value) {
  set_has_p2_points();
  p2_points_ = value;
  // @@protoc_insertion_point(field_set:pong.GameUpdate.p2_points)
}

// required int32 ball_x = 7;
inline bool GameUpdate::has_ball_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GameUpdate::set_has_ball_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GameUpdate::clear_has_ball_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GameUpdate::clear_ball_x() {
  ball_x_ = 0;
  clear_has_ball_x();
}
inline ::google::protobuf::int32 GameUpdate::ball_x() const {
  // @@protoc_insertion_point(field_get:pong.GameUpdate.ball_x)
  return ball_x_;
}
inline void GameUpdate::set_ball_x(::google::protobuf::int32 value) {
  set_has_ball_x();
  ball_x_ = value;
  // @@protoc_insertion_point(field_set:pong.GameUpdate.ball_x)
}

// required int32 ball_y = 8;
inline bool GameUpdate::has_ball_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameUpdate::set_has_ball_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameUpdate::clear_has_ball_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameUpdate::clear_ball_y() {
  ball_y_ = 0;
  clear_has_ball_y();
}
inline ::google::protobuf::int32 GameUpdate::ball_y() const {
  // @@protoc_insertion_point(field_get:pong.GameUpdate.ball_y)
  return ball_y_;
}
inline void GameUpdate::set_ball_y(::google::protobuf::int32 value) {
  set_has_ball_y();
  ball_y_ = value;
  // @@protoc_insertion_point(field_set:pong.GameUpdate.ball_y)
}

// -------------------------------------------------------------------

// GameAction

// required int32 player = 1;
inline bool GameAction::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameAction::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameAction::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameAction::clear_player() {
  player_ = 0;
  clear_has_player();
}
inline ::google::protobuf::int32 GameAction::player() const {
  // @@protoc_insertion_point(field_get:pong.GameAction.player)
  return player_;
}
inline void GameAction::set_player(::google::protobuf::int32 value) {
  set_has_player();
  player_ = value;
  // @@protoc_insertion_point(field_set:pong.GameAction.player)
}

// required int32 dy = 2;
inline bool GameAction::has_dy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameAction::set_has_dy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameAction::clear_has_dy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameAction::clear_dy() {
  dy_ = 0;
  clear_has_dy();
}
inline ::google::protobuf::int32 GameAction::dy() const {
  // @@protoc_insertion_point(field_get:pong.GameAction.dy)
  return dy_;
}
inline void GameAction::set_dy(::google::protobuf::int32 value) {
  set_has_dy();
  dy_ = value;
  // @@protoc_insertion_point(field_set:pong.GameAction.dy)
}

// -------------------------------------------------------------------

// GamePayload

// required .pong.GamePayload.Type type = 1;
inline bool GamePayload::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamePayload::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamePayload::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamePayload::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::pong::GamePayload_Type GamePayload::type() const {
  // @@protoc_insertion_point(field_get:pong.GamePayload.type)
  return static_cast< ::pong::GamePayload_Type >(type_);
}
inline void GamePayload::set_type(::pong::GamePayload_Type value) {
  assert(::pong::GamePayload_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pong.GamePayload.type)
}

// optional .pong.GameSettings settings = 2;
inline bool GamePayload::has_settings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamePayload::set_has_settings() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamePayload::clear_has_settings() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamePayload::clear_settings() {
  if (settings_ != NULL) settings_->::pong::GameSettings::Clear();
  clear_has_settings();
}
inline const ::pong::GameSettings& GamePayload::settings() const {
  // @@protoc_insertion_point(field_get:pong.GamePayload.settings)
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::pong::GameSettings* GamePayload::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) settings_ = new ::pong::GameSettings;
  // @@protoc_insertion_point(field_mutable:pong.GamePayload.settings)
  return settings_;
}
inline ::pong::GameSettings* GamePayload::release_settings() {
  clear_has_settings();
  ::pong::GameSettings* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void GamePayload::set_allocated_settings(::pong::GameSettings* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:pong.GamePayload.settings)
}

// optional .pong.GameUpdate update = 3;
inline bool GamePayload::has_update() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamePayload::set_has_update() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamePayload::clear_has_update() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamePayload::clear_update() {
  if (update_ != NULL) update_->::pong::GameUpdate::Clear();
  clear_has_update();
}
inline const ::pong::GameUpdate& GamePayload::update() const {
  // @@protoc_insertion_point(field_get:pong.GamePayload.update)
  return update_ != NULL ? *update_ : *default_instance_->update_;
}
inline ::pong::GameUpdate* GamePayload::mutable_update() {
  set_has_update();
  if (update_ == NULL) update_ = new ::pong::GameUpdate;
  // @@protoc_insertion_point(field_mutable:pong.GamePayload.update)
  return update_;
}
inline ::pong::GameUpdate* GamePayload::release_update() {
  clear_has_update();
  ::pong::GameUpdate* temp = update_;
  update_ = NULL;
  return temp;
}
inline void GamePayload::set_allocated_update(::pong::GameUpdate* update) {
  delete update_;
  update_ = update;
  if (update) {
    set_has_update();
  } else {
    clear_has_update();
  }
  // @@protoc_insertion_point(field_set_allocated:pong.GamePayload.update)
}

// optional .pong.GameAction action = 4;
inline bool GamePayload::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GamePayload::set_has_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GamePayload::clear_has_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GamePayload::clear_action() {
  if (action_ != NULL) action_->::pong::GameAction::Clear();
  clear_has_action();
}
inline const ::pong::GameAction& GamePayload::action() const {
  // @@protoc_insertion_point(field_get:pong.GamePayload.action)
  return action_ != NULL ? *action_ : *default_instance_->action_;
}
inline ::pong::GameAction* GamePayload::mutable_action() {
  set_has_action();
  if (action_ == NULL) action_ = new ::pong::GameAction;
  // @@protoc_insertion_point(field_mutable:pong.GamePayload.action)
  return action_;
}
inline ::pong::GameAction* GamePayload::release_action() {
  clear_has_action();
  ::pong::GameAction* temp = action_;
  action_ = NULL;
  return temp;
}
inline void GamePayload::set_allocated_action(::pong::GameAction* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
  // @@protoc_insertion_point(field_set_allocated:pong.GamePayload.action)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pong

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pong::GamePayload_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pong::GamePayload_Type>() {
  return ::pong::GamePayload_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pong_2eproto__INCLUDED
