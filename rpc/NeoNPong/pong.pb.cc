// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pong.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pong.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pong {

namespace {

const ::google::protobuf::Descriptor* GameSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamePayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamePayload_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GamePayload_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pong_2eproto() {
  protobuf_AddDesc_pong_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pong.proto");
  GOOGLE_CHECK(file != NULL);
  GameSettings_descriptor_ = file->message_type(0);
  static const int GameSettings_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettings, field_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettings, field_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettings, paddle_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettings, paddle_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettings, ball_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettings, ball_height_),
  };
  GameSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSettings_descriptor_,
      GameSettings::default_instance_,
      GameSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSettings));
  GameUpdate_descriptor_ = file->message_type(1);
  static const int GameUpdate_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUpdate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUpdate, p1_dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUpdate, p2_dy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUpdate, started_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUpdate, p1_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUpdate, p2_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUpdate, ball_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUpdate, ball_y_),
  };
  GameUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameUpdate_descriptor_,
      GameUpdate::default_instance_,
      GameUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameUpdate));
  GameAction_descriptor_ = file->message_type(2);
  static const int GameAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAction, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAction, dy_),
  };
  GameAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAction_descriptor_,
      GameAction::default_instance_,
      GameAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAction));
  GamePayload_descriptor_ = file->message_type(3);
  static const int GamePayload_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePayload, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePayload, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePayload, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePayload, action_),
  };
  GamePayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamePayload_descriptor_,
      GamePayload::default_instance_,
      GamePayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamePayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamePayload));
  GamePayload_Type_descriptor_ = GamePayload_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pong_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSettings_descriptor_, &GameSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameUpdate_descriptor_, &GameUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAction_descriptor_, &GameAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamePayload_descriptor_, &GamePayload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pong_2eproto() {
  delete GameSettings::default_instance_;
  delete GameSettings_reflection_;
  delete GameUpdate::default_instance_;
  delete GameUpdate_reflection_;
  delete GameAction::default_instance_;
  delete GameAction_reflection_;
  delete GamePayload::default_instance_;
  delete GamePayload_reflection_;
}

void protobuf_AddDesc_pong_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\npong.proto\022\004pong\"\217\001\n\014GameSettings\022\023\n\013f"
    "ield_width\030\001 \002(\005\022\024\n\014field_height\030\002 \002(\005\022\024"
    "\n\014paddle_width\030\003 \002(\005\022\025\n\rpaddle_height\030\004 "
    "\002(\005\022\022\n\nball_width\030\005 \002(\005\022\023\n\013ball_height\030\006"
    " \002(\005\"\215\001\n\nGameUpdate\022\n\n\002id\030\001 \002(\t\022\r\n\005p1_dy"
    "\030\002 \002(\005\022\r\n\005p2_dy\030\003 \002(\005\022\017\n\007started\030\004 \002(\010\022\021"
    "\n\tp1_points\030\005 \002(\005\022\021\n\tp2_points\030\006 \002(\005\022\016\n\006"
    "ball_x\030\007 \002(\005\022\016\n\006ball_y\030\010 \002(\005\"(\n\nGameActi"
    "on\022\016\n\006player\030\001 \002(\005\022\n\n\002dy\030\002 \002(\005\"\313\001\n\013GameP"
    "ayload\022$\n\004type\030\001 \002(\0162\026.pong.GamePayload."
    "Type\022$\n\010settings\030\002 \001(\0132\022.pong.GameSettin"
    "gs\022 \n\006update\030\003 \001(\0132\020.pong.GameUpdate\022 \n\006"
    "action\030\004 \001(\0132\020.pong.GameAction\",\n\004Type\022\014"
    "\n\010Settings\020\001\022\n\n\006Update\020\002\022\n\n\006Action\020\003", 556);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pong.proto", &protobuf_RegisterTypes);
  GameSettings::default_instance_ = new GameSettings();
  GameUpdate::default_instance_ = new GameUpdate();
  GameAction::default_instance_ = new GameAction();
  GamePayload::default_instance_ = new GamePayload();
  GameSettings::default_instance_->InitAsDefaultInstance();
  GameUpdate::default_instance_->InitAsDefaultInstance();
  GameAction::default_instance_->InitAsDefaultInstance();
  GamePayload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pong_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pong_2eproto {
  StaticDescriptorInitializer_pong_2eproto() {
    protobuf_AddDesc_pong_2eproto();
  }
} static_descriptor_initializer_pong_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GameSettings::kFieldWidthFieldNumber;
const int GameSettings::kFieldHeightFieldNumber;
const int GameSettings::kPaddleWidthFieldNumber;
const int GameSettings::kPaddleHeightFieldNumber;
const int GameSettings::kBallWidthFieldNumber;
const int GameSettings::kBallHeightFieldNumber;
#endif  // !_MSC_VER

GameSettings::GameSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pong.GameSettings)
}

void GameSettings::InitAsDefaultInstance() {
}

GameSettings::GameSettings(const GameSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pong.GameSettings)
}

void GameSettings::SharedCtor() {
  _cached_size_ = 0;
  field_width_ = 0;
  field_height_ = 0;
  paddle_width_ = 0;
  paddle_height_ = 0;
  ball_width_ = 0;
  ball_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSettings::~GameSettings() {
  // @@protoc_insertion_point(destructor:pong.GameSettings)
  SharedDtor();
}

void GameSettings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSettings_descriptor_;
}

const GameSettings& GameSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pong_2eproto();
  return *default_instance_;
}

GameSettings* GameSettings::default_instance_ = NULL;

GameSettings* GameSettings::New() const {
  return new GameSettings;
}

void GameSettings::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameSettings*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(field_width_, ball_height_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pong.GameSettings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 field_width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_width_)));
          set_has_field_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_field_height;
        break;
      }

      // required int32 field_height = 2;
      case 2: {
        if (tag == 16) {
         parse_field_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_height_)));
          set_has_field_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_paddle_width;
        break;
      }

      // required int32 paddle_width = 3;
      case 3: {
        if (tag == 24) {
         parse_paddle_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paddle_width_)));
          set_has_paddle_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_paddle_height;
        break;
      }

      // required int32 paddle_height = 4;
      case 4: {
        if (tag == 32) {
         parse_paddle_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paddle_height_)));
          set_has_paddle_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ball_width;
        break;
      }

      // required int32 ball_width = 5;
      case 5: {
        if (tag == 40) {
         parse_ball_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ball_width_)));
          set_has_ball_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ball_height;
        break;
      }

      // required int32 ball_height = 6;
      case 6: {
        if (tag == 48) {
         parse_ball_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ball_height_)));
          set_has_ball_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pong.GameSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pong.GameSettings)
  return false;
#undef DO_
}

void GameSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pong.GameSettings)
  // required int32 field_width = 1;
  if (has_field_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->field_width(), output);
  }

  // required int32 field_height = 2;
  if (has_field_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->field_height(), output);
  }

  // required int32 paddle_width = 3;
  if (has_paddle_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->paddle_width(), output);
  }

  // required int32 paddle_height = 4;
  if (has_paddle_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->paddle_height(), output);
  }

  // required int32 ball_width = 5;
  if (has_ball_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ball_width(), output);
  }

  // required int32 ball_height = 6;
  if (has_ball_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ball_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pong.GameSettings)
}

::google::protobuf::uint8* GameSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pong.GameSettings)
  // required int32 field_width = 1;
  if (has_field_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->field_width(), target);
  }

  // required int32 field_height = 2;
  if (has_field_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->field_height(), target);
  }

  // required int32 paddle_width = 3;
  if (has_paddle_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->paddle_width(), target);
  }

  // required int32 paddle_height = 4;
  if (has_paddle_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->paddle_height(), target);
  }

  // required int32 ball_width = 5;
  if (has_ball_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ball_width(), target);
  }

  // required int32 ball_height = 6;
  if (has_ball_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ball_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pong.GameSettings)
  return target;
}

int GameSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 field_width = 1;
    if (has_field_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field_width());
    }

    // required int32 field_height = 2;
    if (has_field_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field_height());
    }

    // required int32 paddle_width = 3;
    if (has_paddle_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paddle_width());
    }

    // required int32 paddle_height = 4;
    if (has_paddle_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paddle_height());
    }

    // required int32 ball_width = 5;
    if (has_ball_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ball_width());
    }

    // required int32 ball_height = 6;
    if (has_ball_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ball_height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameSettings::MergeFrom(const GameSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field_width()) {
      set_field_width(from.field_width());
    }
    if (from.has_field_height()) {
      set_field_height(from.field_height());
    }
    if (from.has_paddle_width()) {
      set_paddle_width(from.paddle_width());
    }
    if (from.has_paddle_height()) {
      set_paddle_height(from.paddle_height());
    }
    if (from.has_ball_width()) {
      set_ball_width(from.ball_width());
    }
    if (from.has_ball_height()) {
      set_ball_height(from.ball_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSettings::CopyFrom(const GameSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSettings::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GameSettings::Swap(GameSettings* other) {
  if (other != this) {
    std::swap(field_width_, other->field_width_);
    std::swap(field_height_, other->field_height_);
    std::swap(paddle_width_, other->paddle_width_);
    std::swap(paddle_height_, other->paddle_height_);
    std::swap(ball_width_, other->ball_width_);
    std::swap(ball_height_, other->ball_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSettings_descriptor_;
  metadata.reflection = GameSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameUpdate::kIdFieldNumber;
const int GameUpdate::kP1DyFieldNumber;
const int GameUpdate::kP2DyFieldNumber;
const int GameUpdate::kStartedFieldNumber;
const int GameUpdate::kP1PointsFieldNumber;
const int GameUpdate::kP2PointsFieldNumber;
const int GameUpdate::kBallXFieldNumber;
const int GameUpdate::kBallYFieldNumber;
#endif  // !_MSC_VER

GameUpdate::GameUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pong.GameUpdate)
}

void GameUpdate::InitAsDefaultInstance() {
}

GameUpdate::GameUpdate(const GameUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pong.GameUpdate)
}

void GameUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  p1_dy_ = 0;
  p2_dy_ = 0;
  started_ = false;
  p1_points_ = 0;
  p2_points_ = 0;
  ball_x_ = 0;
  ball_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameUpdate::~GameUpdate() {
  // @@protoc_insertion_point(destructor:pong.GameUpdate)
  SharedDtor();
}

void GameUpdate::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void GameUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameUpdate_descriptor_;
}

const GameUpdate& GameUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pong_2eproto();
  return *default_instance_;
}

GameUpdate* GameUpdate::default_instance_ = NULL;

GameUpdate* GameUpdate::New() const {
  return new GameUpdate;
}

void GameUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(p1_dy_, ball_y_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pong.GameUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_p1_dy;
        break;
      }

      // required int32 p1_dy = 2;
      case 2: {
        if (tag == 16) {
         parse_p1_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p1_dy_)));
          set_has_p1_dy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_p2_dy;
        break;
      }

      // required int32 p2_dy = 3;
      case 3: {
        if (tag == 24) {
         parse_p2_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p2_dy_)));
          set_has_p2_dy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_started;
        break;
      }

      // required bool started = 4;
      case 4: {
        if (tag == 32) {
         parse_started:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &started_)));
          set_has_started();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_p1_points;
        break;
      }

      // required int32 p1_points = 5;
      case 5: {
        if (tag == 40) {
         parse_p1_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p1_points_)));
          set_has_p1_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_p2_points;
        break;
      }

      // required int32 p2_points = 6;
      case 6: {
        if (tag == 48) {
         parse_p2_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &p2_points_)));
          set_has_p2_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ball_x;
        break;
      }

      // required int32 ball_x = 7;
      case 7: {
        if (tag == 56) {
         parse_ball_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ball_x_)));
          set_has_ball_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ball_y;
        break;
      }

      // required int32 ball_y = 8;
      case 8: {
        if (tag == 64) {
         parse_ball_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ball_y_)));
          set_has_ball_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pong.GameUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pong.GameUpdate)
  return false;
#undef DO_
}

void GameUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pong.GameUpdate)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int32 p1_dy = 2;
  if (has_p1_dy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->p1_dy(), output);
  }

  // required int32 p2_dy = 3;
  if (has_p2_dy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->p2_dy(), output);
  }

  // required bool started = 4;
  if (has_started()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->started(), output);
  }

  // required int32 p1_points = 5;
  if (has_p1_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->p1_points(), output);
  }

  // required int32 p2_points = 6;
  if (has_p2_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->p2_points(), output);
  }

  // required int32 ball_x = 7;
  if (has_ball_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ball_x(), output);
  }

  // required int32 ball_y = 8;
  if (has_ball_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ball_y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pong.GameUpdate)
}

::google::protobuf::uint8* GameUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pong.GameUpdate)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 p1_dy = 2;
  if (has_p1_dy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->p1_dy(), target);
  }

  // required int32 p2_dy = 3;
  if (has_p2_dy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->p2_dy(), target);
  }

  // required bool started = 4;
  if (has_started()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->started(), target);
  }

  // required int32 p1_points = 5;
  if (has_p1_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->p1_points(), target);
  }

  // required int32 p2_points = 6;
  if (has_p2_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->p2_points(), target);
  }

  // required int32 ball_x = 7;
  if (has_ball_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ball_x(), target);
  }

  // required int32 ball_y = 8;
  if (has_ball_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ball_y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pong.GameUpdate)
  return target;
}

int GameUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 p1_dy = 2;
    if (has_p1_dy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p1_dy());
    }

    // required int32 p2_dy = 3;
    if (has_p2_dy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p2_dy());
    }

    // required bool started = 4;
    if (has_started()) {
      total_size += 1 + 1;
    }

    // required int32 p1_points = 5;
    if (has_p1_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p1_points());
    }

    // required int32 p2_points = 6;
    if (has_p2_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->p2_points());
    }

    // required int32 ball_x = 7;
    if (has_ball_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ball_x());
    }

    // required int32 ball_y = 8;
    if (has_ball_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ball_y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameUpdate::MergeFrom(const GameUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_p1_dy()) {
      set_p1_dy(from.p1_dy());
    }
    if (from.has_p2_dy()) {
      set_p2_dy(from.p2_dy());
    }
    if (from.has_started()) {
      set_started(from.started());
    }
    if (from.has_p1_points()) {
      set_p1_points(from.p1_points());
    }
    if (from.has_p2_points()) {
      set_p2_points(from.p2_points());
    }
    if (from.has_ball_x()) {
      set_ball_x(from.ball_x());
    }
    if (from.has_ball_y()) {
      set_ball_y(from.ball_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameUpdate::CopyFrom(const GameUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void GameUpdate::Swap(GameUpdate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(p1_dy_, other->p1_dy_);
    std::swap(p2_dy_, other->p2_dy_);
    std::swap(started_, other->started_);
    std::swap(p1_points_, other->p1_points_);
    std::swap(p2_points_, other->p2_points_);
    std::swap(ball_x_, other->ball_x_);
    std::swap(ball_y_, other->ball_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameUpdate_descriptor_;
  metadata.reflection = GameUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAction::kPlayerFieldNumber;
const int GameAction::kDyFieldNumber;
#endif  // !_MSC_VER

GameAction::GameAction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pong.GameAction)
}

void GameAction::InitAsDefaultInstance() {
}

GameAction::GameAction(const GameAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pong.GameAction)
}

void GameAction::SharedCtor() {
  _cached_size_ = 0;
  player_ = 0;
  dy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAction::~GameAction() {
  // @@protoc_insertion_point(destructor:pong.GameAction)
  SharedDtor();
}

void GameAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAction_descriptor_;
}

const GameAction& GameAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pong_2eproto();
  return *default_instance_;
}

GameAction* GameAction::default_instance_ = NULL;

GameAction* GameAction::New() const {
  return new GameAction;
}

void GameAction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameAction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(player_, dy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pong.GameAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 player = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dy;
        break;
      }

      // required int32 dy = 2;
      case 2: {
        if (tag == 16) {
         parse_dy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dy_)));
          set_has_dy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pong.GameAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pong.GameAction)
  return false;
#undef DO_
}

void GameAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pong.GameAction)
  // required int32 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }

  // required int32 dy = 2;
  if (has_dy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pong.GameAction)
}

::google::protobuf::uint8* GameAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pong.GameAction)
  // required int32 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }

  // required int32 dy = 2;
  if (has_dy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pong.GameAction)
  return target;
}

int GameAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }

    // required int32 dy = 2;
    if (has_dy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameAction::MergeFrom(const GameAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_dy()) {
      set_dy(from.dy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAction::CopyFrom(const GameAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameAction::Swap(GameAction* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(dy_, other->dy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAction_descriptor_;
  metadata.reflection = GameAction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GamePayload_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePayload_Type_descriptor_;
}
bool GamePayload_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GamePayload_Type GamePayload::Settings;
const GamePayload_Type GamePayload::Update;
const GamePayload_Type GamePayload::Action;
const GamePayload_Type GamePayload::Type_MIN;
const GamePayload_Type GamePayload::Type_MAX;
const int GamePayload::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GamePayload::kTypeFieldNumber;
const int GamePayload::kSettingsFieldNumber;
const int GamePayload::kUpdateFieldNumber;
const int GamePayload::kActionFieldNumber;
#endif  // !_MSC_VER

GamePayload::GamePayload()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pong.GamePayload)
}

void GamePayload::InitAsDefaultInstance() {
  settings_ = const_cast< ::pong::GameSettings*>(&::pong::GameSettings::default_instance());
  update_ = const_cast< ::pong::GameUpdate*>(&::pong::GameUpdate::default_instance());
  action_ = const_cast< ::pong::GameAction*>(&::pong::GameAction::default_instance());
}

GamePayload::GamePayload(const GamePayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pong.GamePayload)
}

void GamePayload::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  settings_ = NULL;
  update_ = NULL;
  action_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamePayload::~GamePayload() {
  // @@protoc_insertion_point(destructor:pong.GamePayload)
  SharedDtor();
}

void GamePayload::SharedDtor() {
  if (this != default_instance_) {
    delete settings_;
    delete update_;
    delete action_;
  }
}

void GamePayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamePayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamePayload_descriptor_;
}

const GamePayload& GamePayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pong_2eproto();
  return *default_instance_;
}

GamePayload* GamePayload::default_instance_ = NULL;

GamePayload* GamePayload::New() const {
  return new GamePayload;
}

void GamePayload::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 1;
    if (has_settings()) {
      if (settings_ != NULL) settings_->::pong::GameSettings::Clear();
    }
    if (has_update()) {
      if (update_ != NULL) update_->::pong::GameUpdate::Clear();
    }
    if (has_action()) {
      if (action_ != NULL) action_->::pong::GameAction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamePayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pong.GamePayload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pong.GamePayload.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pong::GamePayload_Type_IsValid(value)) {
            set_type(static_cast< ::pong::GamePayload_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_settings;
        break;
      }

      // optional .pong.GameSettings settings = 2;
      case 2: {
        if (tag == 18) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_update;
        break;
      }

      // optional .pong.GameUpdate update = 3;
      case 3: {
        if (tag == 26) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_action;
        break;
      }

      // optional .pong.GameAction action = 4;
      case 4: {
        if (tag == 34) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pong.GamePayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pong.GamePayload)
  return false;
#undef DO_
}

void GamePayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pong.GamePayload)
  // required .pong.GamePayload.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .pong.GameSettings settings = 2;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->settings(), output);
  }

  // optional .pong.GameUpdate update = 3;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->update(), output);
  }

  // optional .pong.GameAction action = 4;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pong.GamePayload)
}

::google::protobuf::uint8* GamePayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pong.GamePayload)
  // required .pong.GamePayload.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .pong.GameSettings settings = 2;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->settings(), target);
  }

  // optional .pong.GameUpdate update = 3;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->update(), target);
  }

  // optional .pong.GameAction action = 4;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pong.GamePayload)
  return target;
}

int GamePayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pong.GamePayload.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .pong.GameSettings settings = 2;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

    // optional .pong.GameUpdate update = 3;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }

    // optional .pong.GameAction action = 4;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamePayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamePayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamePayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamePayload::MergeFrom(const GamePayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_settings()) {
      mutable_settings()->::pong::GameSettings::MergeFrom(from.settings());
    }
    if (from.has_update()) {
      mutable_update()->::pong::GameUpdate::MergeFrom(from.update());
    }
    if (from.has_action()) {
      mutable_action()->::pong::GameAction::MergeFrom(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamePayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamePayload::CopyFrom(const GamePayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamePayload::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_settings()) {
    if (!this->settings().IsInitialized()) return false;
  }
  if (has_update()) {
    if (!this->update().IsInitialized()) return false;
  }
  if (has_action()) {
    if (!this->action().IsInitialized()) return false;
  }
  return true;
}

void GamePayload::Swap(GamePayload* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(settings_, other->settings_);
    std::swap(update_, other->update_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamePayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamePayload_descriptor_;
  metadata.reflection = GamePayload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pong

// @@protoc_insertion_point(global_scope)
